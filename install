#!/usr/bin/env python3

import argparse
import json
import os
import pathlib
import platform
import shutil
import subprocess
import time


current_env = os.environ.copy()


def run(cmd, check=True, shell=False, env=None, **kwargs):
    print(f'+ {cmd}')
    new_env = current_env.update(env) if env is not None else current_env
    if shell:
        return subprocess.run(cmd, check=check, shell=True, env=new_env, **kwargs)
    else:
        return subprocess.run(cmd.split(), check=check, shell=False, env=new_env, **kwargs)


def controller_exists(name):
    output = json.loads(run('juju controllers --format json', text=True, stdout=subprocess.PIPE).stdout)
    return False if output['controllers'] is None else name in output['controllers']


def model_exists(name):
    output = json.loads(run('juju models --format json', text=True, stdout=subprocess.PIPE).stdout)
    for model in output['models']:
        if model['short-name'] == name:
            return True
    return False


def parse_args():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--reinstall', action='store_true', help='Completely uninstall juju and microk8s first')
    parser.add_argument('--juju-channel', action='store', default='3/stable', help='The snap channel to install juju from')
    parser.add_argument('--agent-version', action='store', help='Version of the juju agent to ask for during bootstrap')
    return parser.parse_args()


def setup_lxd(args):
    run('sudo snap install lxd')
    run('sudo lxd init --auto')
    if not controller_exists('machine'):
        agent_arg = f'--agent-version {args.agent_version}' if args.agent_version else ''
        run(f'juju bootstrap {agent_arg} localhost machine')
    run('sudo usermod -a -G lxd $USER', shell=True)


def setup_k8s(agent_version):
    run('sudo snap install microk8s --classic')
    run('sudo snap alias microk8s.kubectl kubectl')
    run('sudo microk8s start')
    run('sudo microk8s status --wait-ready')
    run('sudo microk8s enable hostpath-storage dns dashboard ingress')
    run('kubectl wait --timeout 30m --for=condition=Ready pods --all --all-namespaces')
    time.sleep(60)
    addr = run("ip -4 -j route get 2.2.2.2 | jq -r '.[] | .prefsrc'", shell=True, text=True, stdout=subprocess.PIPE).stdout.strip()
    run(f'sudo microk8s enable metallb:{addr}-{addr}')
    run('kubectl rollout status daemonset.apps/speaker -n metallb-system -w')
    run('sudo microk8s config > ${HOME}/.kube/config', shell=True)
    run('sudo microk8s config | juju add-k8s mk8s --client', shell=True)
    if not controller_exists('k8s'):
        agent_arg = f'--agent-version {agent_version}' if agent_version else ''
        run(f'juju bootstrap {agent_arg} mk8s k8s')
    run('sudo usermod -a -G microk8s $USER', shell=True)


def main():
    args = parse_args()

    if args.reinstall:
        run('sudo snap remove juju --purge')
        run('sudo snap remove microk8s --purge')
        jujudir = os.path.expanduser('~/.local/share/juju')
        run(f'rm -rf {jujudir}')
        lxd_instances = run('lxc list --format csv', text=True, stdout=subprocess.PIPE).stdout.strip().splitlines()
        for instance in lxd_instances:
            if instance.split(",")[0].startswith('juju-'):
                run(f'lxc delete {instance.split(",")[0]} --force')

    apt_env = {'DEBIAN_FRONTEND': 'noninteractive'}
    run('sudo apt-get -o DPkg::Lock::Timeout=60 update')
    run('sudo -E apt-get -o DPkg::Lock::Timeout=60 -yq dist-upgrade', env=apt_env)
    pversion = platform.python_version_tuple()
    run(f'sudo -E apt-get -o DPkg::Lock::Timeout=60 -yq install make virtualenv jq tox time python{pversion[0]}.{pversion[1]}-venv', env=apt_env)
    run('sudo snap install yq')
    run(f'sudo snap install juju --channel {args.juju_channel}')
    run('sudo snap install charmcraft --classic')
    pathlib.Path('~/.aliases.d').expanduser().mkdir(exist_ok=True)
    shutil.copy('juju.aliases', pathlib.Path('~/.aliases.d').expanduser())

    # Install additional tools
    homedir = pathlib.Path('~').expanduser()
    (homedir / 'repos').mkdir(exist_ok=True)
    (homedir / 'bin').mkdir(exist_ok=True)
    if not (homedir / 'repos/jhack').exists():
        run(f'git clone git@github.com:canonical/jhack.git {homedir}/repos/jhack', shell=True)
    run(f'python3 -m venv {homedir}/repos/jhack/venv', shell=True)
    run(f'. {homedir}/repos/jhack/venv/bin/activate; pip install -e {homedir}/repos/jhack', shell=True)
    if not (homedir / 'repos/packcharm').exists():
        run(f'git clone git@github.com:dstathis/packcharm.git {homedir}/repos/packcharm', shell=True)
    run(f'python3 -m venv {homedir}/repos/packcharm/venv', shell=True)
    run(f'. {homedir}/repos/packcharm/venv/bin/activate; pip install {homedir}/repos/packcharm', shell=True)
    run(f'cp scripts/* {homedir}/bin/', shell=True)

    setup_lxd(args)
    setup_k8s(args.agent_version)

    curdir = os.getcwd()
    try:
        os.chdir(os.environ['HOME'])

        # COS
        if not os.path.exists('repos/grafana'):
            run('git clone git@github.com:canonical/grafana-k8s-operator.git repos/grafana')
        if not os.path.exists('repos/prometheus'):
            run('git clone git@github.com:canonical/prometheus-k8s-operator.git repos/prometheus')
        if not os.path.exists('repos/alertmanager'):
            run('git clone git@github.com:canonical/alertmanager-k8s-operator.git repos/alertmanager')
        if not os.path.exists('repos/agent'):
            run('git clone git@github.com:canonical/grafana-agent-operator.git repos/agent')
        if not os.path.exists('repos/k8s-agent'):
            run('git clone git@github.com:canonical/grafana-agent-k8s-operator.git repos/k8s-agent')
        if not os.path.exists('repos/loki'):
            run('git clone git@github.com:canonical/loki-operator.git repos/loki')
        if not os.path.exists('repos/catalogue'):
            run('git clone git@github.com:canonical/catalogue-k8s-operator.git repos/catalogue')
        if not os.path.exists('repos/mimir-worker'):
            run('git clone git@github.com:canonical/mimir-worker-k8s-operator.git repos/mimir-worker')
        if not os.path.exists('repos/mimir-coordinator'):
            run('git clone git@github.com:canonical/mimir-coordinator-k8s-operator.git repos/mimir-coordinator')

        # Traefik
        if not os.path.exists('traefik'):
            run('git clone git@github.com:canonical/traefik-k8s-operator.git repos/traefik')

        # Istio
        if not os.path.exists('istio'):
            run('git clone git@github.com:canonical/istio-k8s-operator.git istio')
        if not os.path.exists('beacon'):
            run('git clone git@github.com:canonical/istio-beacon-k8s-operator.git beacon')
        if not os.path.exists('ingress'):
            run('git clone git@github.com:canonical/istio-ingress-k8s-operator.git ingress')

    finally:
        os.chdir(curdir)


if __name__ == '__main__':
    main()
