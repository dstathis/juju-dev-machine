#!/usr/bin/env python3

import argparse
import os
import pathlib
import shutil
import subprocess

def run(cmd, check=True, shell=False, **kwargs):
    if shell:
        return subprocess.run(cmd, check=check, shell=True, **kwargs)
    else:
        return subprocess.run(cmd.split(), check=check, shell=False, **kwargs)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--lma', action='store_true', help='clone lma repos and create lma model')
    parser.add_argument('--lxd', action='store_true', help='Set up a lxd cloud (Not repeatable)')
    parser.add_argument('--k8s', action='store_true', help='Set up a k8s cloud (Not repeatable)')
    parser.add_argument('--reinstall', action='store_true', help='Completely uninstall juju and microk8s first')
    return parser.parse_args()


def setup_lxd():
    run('sudo snap install lxd')
    run('sudo lxd init --auto')
    run('lxc network set lxdbr0 ipv6.address none')
    run('juju bootstrap localhost')


def setup_k8s():
    run('sudo snap install docker')
    run('sudo snap install microk8s --classic')
    run('sudo snap alias microk8s.kubectl kubectl')
    run('sudo microk8s status --wait-ready')
    run('sudo microk8s enable storage dns dashboard')
    run('sleep 180')
    run('sudo microk8s config | juju add-k8s mk8s --client', shell=True)
    run('juju bootstrap mk8s')
    run('sudo usermod -a -G microk8s $USER', shell=True)



def main():
    args = parse_args()

    if args.reinstall:
        run('sudo snap remove juju --purge')
        run('sudo snap remove microk8s --purge')
        jujudir = os.path.expanduser('~/.local/share/juju')
        run(f'rm -rf {jujudir}')

    run('sudo apt-get update')
    run('sudo apt-get -y dist-upgrade')
    run('sudo apt-get -y install make virtualenv')
    run('sudo snap install juju --classic')
    run('sudo snap install juju-wait --classic')
    run('sudo snap install charmcraft --classic')
    pathlib.Path('~/.aliases.d').expanduser().mkdir(exist_ok=True)
    shutil.copy('juju.aliases', pathlib.Path('~/.aliases.d').expanduser())

    if args.lxd:
        setup_lxd()
    if args.k8s:
        setup_k8s()

    if args.lma:
        curdir = os.getcwd()
        try:
            os.chdir(os.environ['HOME'])
            if not os.path.exists('grafana-operator'):
                run('git clone git@github.com:canonical/grafana-operator.git')
            if not os.path.exists('prometheus-operator'):
                run('git clone git@github.com:canonical/prometheus-operator.git')
            if not os.path.exists('alertmanager-operator'):
                run('git clone git@github.com:canonical/alertmanager-operator.git')
            if not os.path.exists('cassandra-operator'):
                run('git clone git@github.com:dstathis/cassandra-operator.git')
            for line in run('juju list-models', capture_output=True, encoding='utf-8').stdout.splitlines():
                if line.startswith('lma'):
                    break
            else:
                run('juju add-model lma')
                run('juju model-config update-status-hook-interval=1m')
                run('kubectl config set-context --current --namespace=lma')
        finally:
            os.chdir(curdir)


if __name__ == '__main__':
    main()
