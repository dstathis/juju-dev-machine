#!/usr/bin/env python3

import argparse
import os
import pathlib
import platform
import shutil
import subprocess
import tempfile
import time


current_env = os.environ.copy()


def run(cmd, check=True, shell=False, env=None, **kwargs):
    print(f'+ {cmd}')
    new_env = current_env.update(env) if env is not None else current_env
    if shell:
        return subprocess.run(cmd, check=check, shell=True, env=new_env, **kwargs)
    else:
        return subprocess.run(cmd.split(), check=check, shell=False, env=new_env, **kwargs)


def parse_args():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--lxd-bug', action='store_true', help='Install lxd 5.5 to avoid "Attempting to connect" bug')
    parser.add_argument('--reinstall', action='store_true', help='Completely uninstall juju and microk8s first')
    parser.add_argument('--juju-channel', action='store', default='latest/stable', help='The snap channel to install juju from')
    parser.add_argument('--agent-version', action='store', help='Version of the juju agent to ask for during bootstrap')
    parser.add_argument('--no-deploy', action='store_true', help='Deploy cos and workloads in cross model setup')
    parser.add_argument('--deploy-channel', action='store', default='edge', help='channel to be used for "--deploy"')
    return parser.parse_args()


def setup_lxd(args):
    channel = '5.5/stable' if args.lxd_bug else 'latest/stable'
    run(f'sudo snap install --channel {channel} lxd')
    run('sudo lxd init --auto')
    run('juju bootstrap localhost machine')
    run('sudo usermod -a -G lxd $USER', shell=True)


def setup_k8s(agent_version):
    run('sudo snap install microk8s --classic')
    run('sudo snap alias microk8s.kubectl kubectl')
    run('sudo microk8s start')
    run('sudo microk8s status --wait-ready')
    run('sudo microk8s enable hostpath-storage dns dashboard ingress')
    run('kubectl wait --timeout 30m --for=condition=Ready pods --all --all-namespaces')
    time.sleep(60)
    addr = run("ip -4 -j route get 2.2.2.2 | jq -r '.[] | .prefsrc'", shell=True, text=True, stdout=subprocess.PIPE).stdout.strip()
    run(f'sudo microk8s enable metallb:{addr}-{addr}')
    run('kubectl rollout status daemonset.apps/speaker -n metallb-system -w')
    run('sudo microk8s config | juju add-k8s mk8s --client', shell=True)
    agent_arg = f'--agent-version {agent_version}' if agent_version else ''
    run(f'juju bootstrap {agent_arg} mk8s k8s')
    run('sudo usermod -a -G microk8s $USER', shell=True)


def main():
    args = parse_args()

    if args.reinstall:
        run('sudo snap remove juju --purge')
        run('sudo snap remove microk8s --purge')
        jujudir = os.path.expanduser('~/.local/share/juju')
        run(f'rm -rf {jujudir}')
        lxd_instances = run('lxc list --format csv', text=True, stdout=subprocess.PIPE).stdout.strip().splitlines()
        for instance in lxd_instances:
            if instance.split(",")[0].startswith('juju-'):
                run(f'lxc delete {instance.split(",")[0]} --force')

    apt_env = {'DEBIAN_FRONTEND': 'noninteractive'}
    run('sudo apt-get -o DPkg::Lock::Timeout=60 update')
    run('sudo apt-get -o DPkg::Lock::Timeout=60 -yq dist-upgrade', env=apt_env)
    pversion = platform.python_version_tuple()
    run(f'sudo apt-get -o DPkg::Lock::Timeout=60 -yq install make virtualenv jq tox time python{pversion[0]}.{pversion[1]}-venv', env=apt_env)
    run(f'sudo snap install juju --channel {args.juju_channel}')
    run('sudo snap install charmcraft --classic')
    pathlib.Path('~/.local/share').expanduser().mkdir(parents=True, exist_ok=True) # See https://bugs.launchpad.net/juju/+bug/1988355
    pathlib.Path('~/.aliases.d').expanduser().mkdir(exist_ok=True)
    shutil.copy('juju.aliases', pathlib.Path('~/.aliases.d').expanduser())

    # Install additional tools
    homedir = pathlib.Path('~').expanduser()
    (homedir / 'repos').mkdir(exist_ok=True)
    (homedir / 'bin').mkdir(exist_ok=True)
    if not (homedir / 'repos/jhack').exists():
        run(f'git clone git@github.com:PietroPasotti/jhack.git {homedir}/repos/jhack', shell=True)
    run(f'python3 -m venv {homedir}/repos/jhack/venv', shell=True)
    run(f'. {homedir}/repos/jhack/venv/bin/activate; pip install -e {homedir}/repos/jhack', shell=True)
    if not (homedir / 'repos/packcharm').exists():
        run(f'git clone git@github.com:dstathis/packcharm.git {homedir}/repos/packcharm', shell=True)
    run(f'python3 -m venv {homedir}/repos/packcharm/venv', shell=True)
    run(f'. {homedir}/repos/packcharm/venv/bin/activate; pip install {homedir}/repos/packcharm', shell=True)
    run(f'cp scripts/* {homedir}/bin/', shell=True)

    setup_lxd(args)
    setup_k8s(args.agent_version)

    curdir = os.getcwd()
    try:
        os.chdir(os.environ['HOME'])
        if not os.path.exists('grafana'):
            run('git clone git@github.com:canonical/grafana-k8s-operator.git grafana')
        if not os.path.exists('prometheus'):
            run('git clone git@github.com:canonical/prometheus-k8s-operator.git prometheus')
        if not os.path.exists('alertmanager'):
            run('git clone git@github.com:canonical/alertmanager-k8s-operator.git alertmanager')
        if not os.path.exists('agent'):
            run('git clone git@github.com:canonical/grafana-agent-operator.git agent')
        if not os.path.exists('k8s-agent'):
            run('git clone git@github.com:canonical/grafana-agent-k8s-operator.git k8s-agent')
        if not os.path.exists('loki'):
            run('git clone git@github.com:canonical/loki-operator.git loki')
        if not os.path.exists('traefik'):
            run('git clone git@github.com:canonical/traefik-k8s-operator.git traefik')
        if not os.path.exists('catalogue'):
            run('git clone git@github.com:canonical/catalogue-k8s-operator.git catalogue')
        if not os.path.exists('worker'):
            run('git clone git@github.com:canonical/mimir-worker-k8s-operator.git worker')
        if not os.path.exists('coordinator'):
            run('git clone git@github.com:canonical/mimir-coordinator-k8s-operator.git coordinator')
        for line in run('juju list-models', capture_output=True, encoding='utf-8').stdout.splitlines():
            if line.startswith('lma'):
                break
        else:
            run('juju switch k8s')
            run('juju add-model lma')
            run('juju model-config update-status-hook-interval=30s')
            run('kubectl config set-context --current --namespace=lma')
    finally:
        os.chdir(curdir)

    if not args.no_deploy:
        run('juju switch k8s:admin/lma')
        # We can't create the temp dir in /tmp because the juju snap can not access it.
        with tempfile.TemporaryDirectory(dir='.') as d:
            run(f'curl -L https://raw.githubusercontent.com/canonical/cos-lite-bundle/main/overlays/offers-overlay.yaml -o {d}/offers-overlay.yaml')
            run(f'juju deploy cos-lite --channel {args.deploy_channel} --trust --overlay {d}/offers-overlay.yaml')
        run('juju add-model stuff')
        run('juju switch k8s:admin/stuff')
        run('juju consume admin/lma.prometheus-receive-remote-write prometheus')
        run('juju consume admin/lma.loki-logging loki')
        run('juju consume admin/lma.grafana-dashboards grafana')
        run(f'juju deploy grafana-agent-k8s --channel {args.deploy_channel} agent')
        run('juju relate agent prometheus')
        run('juju relate agent loki')
        run(f'juju deploy flog-k8s --channel {args.deploy_channel} flog')
        run('juju relate flog agent')
        run('juju switch machine')
        run('juju add-model machine')
        run('juju consume k8s:admin/lma.prometheus-receive-remote-write prometheus')
        run('juju consume k8s:admin/lma.loki-logging loki')
        run('juju consume k8s:admin/lma.grafana-dashboards grafana')
        run('juju switch k8s:lma')
        run('juju run --wait 5m grafana/0 get-admin-password')


if __name__ == '__main__':
    main()
