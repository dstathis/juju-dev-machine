#!/usr/bin/env python3

import argparse
import json
import os
import subprocess
import sys
import tempfile


current_env = os.environ.copy()
RED = '\033[91m'
ENDCOLOR = '\033[0m'


def main():
    args = parse_args()
    if 'remove-istio' in args.targets:
        remove_istio()
    if 'cos' in args.targets:
        deploy_cos(channel=args.channel)
    if 'istio' in args.targets:
        deploy_istio(channel=args.channel)


class ModelExistsError(Exception):
    pass


def run(cmd, check=True, shell=False, env=None, **kwargs):
    print(f'+ {cmd}')
    new_env = current_env.update(env) if env is not None else current_env
    if shell:
        return subprocess.run(cmd, check=check, shell=True, env=new_env, **kwargs)
    else:
        return subprocess.run(cmd.split(), check=check, shell=False, env=new_env, **kwargs)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('targets', nargs='*', default=['istio'], help='Targets to deploy [istio, cos]')
    parser.add_argument('--channel', default='edge', help='Channel')
    return parser.parse_args()


def get_models():
    models_dict = json.loads(subprocess.run(['juju', 'models', '--format', 'json'], stdout=subprocess.PIPE).stdout)
    return [model['short-name'] for model in models_dict['models']]


def ensure_models(models):
    """
    models: {<controller>: [<model>, <model>]}
    """
    for controller in models:
        run(f'juju switch {controller}')
        existing_models = get_models()
        for model in models[controller]:
            if model in existing_models:
                sys.stderr.write(f'Model {controller}:{model} already exists. Exiting.\n')
                raise ModelExistsError()


def remove_istio():
    run('juju switch k8s')
    run('juju destroy-model --destroy-storage --no-prompt istio-test')
    run('juju destroy-model --destroy-storage --no-prompt istio-system')


def deploy_istio(channel):
    try:
        ensure_models({'k8s': ['istio-system', 'istio-test']})
    except ModelExistsError:
        return

    run('juju switch k8s')
    run('juju add-model istio-system')
    run(f'juju deploy istio-k8s istio --channel {channel}')

    run('juju add-model istio-test')
    run(f'juju deploy istio-beacon-k8s beacon --channel {channel} --config model-on-mesh=true')
    run(f'juju deploy istio-ingress-k8s ingress --channel {channel}')


def deploy_cos(channel):

    try:
        ensure_models({'machine': ['cos-stuff'], 'k8s': ['cos', 'cos-stuff']})
    except ModelExistsError:
        return
    run('juju switch k8s')
    run('juju add-model cos')

    # We can't create the temp dir in /tmp because the juju snap can not access it.
    with tempfile.TemporaryDirectory(dir='.') as d:
        run(f'curl -L https://raw.githubusercontent.com/canonical/cos-lite-bundle/main/overlays/offers-overlay.yaml -o {d}/offers-overlay.yaml')
        run(f'juju deploy cos-lite --channel {channel} --trust --overlay {d}/offers-overlay.yaml')
    run('juju add-model cos-stuff')
    run('juju consume admin/cos.prometheus-receive-remote-write prometheus')
    run('juju consume admin/cos.loki-logging loki')
    run('juju consume admin/cos.grafana-dashboards grafana')
    run(f'juju deploy grafana-agent-k8s --channel {channel} agent')
    run('juju relate agent prometheus')
    run('juju relate agent loki')
    run('juju relate agent grafana')
    run(f'juju deploy flog-k8s --channel {channel} flog')
    run('juju relate flog agent')
    run(f'juju deploy --channel {channel} zinc-k8s zinc')
    run('juju relate zinc:grafana-dashboard agent')
    run('juju relate zinc:metrics-endpoint agent')
    run('juju relate zinc:log-proxy agent')
    run('juju switch machine')
    run('juju add-model cos-stuff')
    run('juju consume k8s:admin/cos.prometheus-receive-remote-write prometheus')
    run('juju consume k8s:admin/cos.loki-logging loki')
    run('juju consume k8s:admin/cos.grafana-dashboards grafana')
    run(f'juju deploy --channel {channel} zookeeper')
    run(f'juju deploy --channel {channel} hardware-observer hob')
    run('juju relate hob zookeeper')
    run(f'juju deploy --channel {channel} grafana-agent agent')
    run('juju relate agent grafana')
    run('juju relate agent loki')
    run('juju relate agent prometheus')
    run('juju relate agent zookeeper')
    run('juju relate hob agent')
    run('juju switch k8s:cos')


if __name__ == '__main__':
    main()
